class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
         for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                visited[i][j] = false;
            }
         }
        int total_islands = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               if(!visited[i][j] && grid[i][j] == '1') {
                  total_islands++;
                  traverseIsland(i, j, grid, visited, m, n);
               }
            }
        }
        return total_islands;
    }
    void traverseIsland(int i, int j, char[][] grid, boolean[][] visited, int m, int n){
        if(i<0 || j<0 || i>=m || j>=n) {
            return;
        }
        if(grid[i][j] == '0' || visited[i][j]){
            return;
        }
        visited[i][j] = true;
        traverseIsland(i+1, j, grid, visited, m, n);
        traverseIsland(i-1, j, grid, visited, m, n);
        traverseIsland(i, j+1, grid, visited, m, n);
        traverseIsland(i, j-1, grid, visited, m, n);
    }
}
